{"version":3,"sources":["utils/setAuthToken.js","actions/authActions.js","actions/types.js","validation/is-empty.js","reducers/authReducer.js","reducers/errorReducer.js","reducers/postReducer.js","reducers/index.js","store.js","components/layout/Navbar.js","components/layout/Footer.js","components/layout/Landing.js","components/common/TextFieldGroup.js","components/auth/Register.js","components/auth/Login.js","actions/postActions.js","components/home/EditPostModalPopup.js","components/home/MemorablePost.js","components/home/PostCards.js","components/home/CreatePost.js","components/home/Home.js","App.js","serviceWorker.js","index.js"],"names":["setAuthToken","token","axios","defaults","headers","common","setCurrentUser","decoded","type","payload","logoutUser","dispatch","localStorage","removeItem","window","location","href","isEmpty","value","undefined","Object","keys","length","trim","initialState","isAuthenticated","user","loading","showModal","editPostId","posts","combineReducers","auth","state","action","errors","post","filter","el","_id","console","log","shouldShowModal","postId","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","Navbar","e","preventDefault","this","props","authLinks","className","onClick","onLogoutClick","bind","src","avatar","alt","style","width","marginRight","title","guestLinks","to","data-toggle","data-target","height","viewBox","fill","xmlns","fillRule","d","id","Component","connect","Footer","Date","getFullYear","Landing","history","push","screen","TextFieldGroup","name","placeholder","error","label","info","onChange","disabled","classnames","defaultProps","Register","email","password","password2","onSubmit","setState","target","nextProps","newUser","registeruser","noValidate","userData","then","res","catch","err","response","data","withRouter","Login","loginUser","setItem","jwt_decode","getCurrentUsersPosts","setPostsLoading","get","PostCards","editedPost","elem","postContent","postHeader","postMood","happy","sad","funny","tired","bored","love","blessed","crying","angry","calm","postHashtags","memorablePost","postDate","memorablePostChange","handleHashtagsChange","postMoodChange","stopPropagation","editPost","onHide","checked","split","isChecked","prevState","assign","nextState","Modal","aria-labelledby","Header","closeButton","Title","Body","editor","ClassicEditor","event","getData","padding","paddingTop","marginBottom","inputProps","htmlFor","role","aria-label","updatedData","put","MemorablePost","margin","deletePost","EditPostModalPopup","show","size","map","date","Intl","DateTimeFormat","year","month","day","formatToParts","postMoods","postMoodObj","key","minWidth","float","cursor","paddingLeft","config","toolbar","i","borderRadius","delete","CreatePost","postHeaderChange","postContentChange","createPost","display","postData","Home","jwtToken","currentTime","now","exp","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8c12f1dd.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst setAuthToken = (token) => {\r\n    if (token) {\r\n        // apply to every request\r\n        axios.defaults.headers.common[\"Authorization\"] = token;\r\n    } else {\r\n        // Delete the auth header\r\n        delete axios.defaults.headers.common[\"Authorization\"];\r\n    }\r\n};\r\n\r\nexport default setAuthToken;\r\n","import { GET_ERRORS, SET_CURRENT_USER } from \"./types\";\r\nimport axios from \"axios\";\r\nimport setAuthToken from \"./../utils/setAuthToken\";\r\nimport jwt_decode from \"jwt-decode\";\r\n// Register User\r\n\r\nexport const registeruser = (userData, history) => (dispatch) => {\r\n    axios\r\n        .post(\"/api/users/signup\", userData)\r\n        .then((res) => {\r\n            history.push(\"/login\");\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: GET_ERRORS,\r\n                payload: err.response.data,\r\n            });\r\n        });\r\n};\r\n\r\n// Login user - get user token\r\n\r\nexport const loginUser = (userData) => (dispatch) => {\r\n    axios\r\n        .post(\"/api/users/signin\", userData)\r\n        .then((res) => {\r\n            // save to localstorage\r\n            const { token } = res.data;\r\n\r\n            //set token to localstorage\r\n            localStorage.setItem(\"jwtToken\", token);\r\n\r\n            // set token to auth header\r\n            setAuthToken(token);\r\n\r\n            //decode token to get user data\r\n            const decoded = jwt_decode(token);\r\n            //set current user\r\n            dispatch(setCurrentUser(decoded));\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: GET_ERRORS,\r\n                payload: err.response.data,\r\n            });\r\n        });\r\n};\r\n\r\n// set logged in user`\r\n\r\nexport const setCurrentUser = (decoded) => {\r\n    return {\r\n        type: SET_CURRENT_USER,\r\n        payload: decoded,\r\n    };\r\n};\r\n\r\n// log user out\r\nexport const logoutUser = () => (dispatch) => {\r\n    // remove token from local storage\r\n    localStorage.removeItem(\"jwtToken\");\r\n    //remove auth header for future requests\r\n    setAuthToken(false);\r\n    // set current user to empty object {} which will set authenticaled to false\r\n    dispatch(setCurrentUser({}));\r\n    window.location.href = \"/login\";\r\n};\r\n","export const GET_ERRORS = \"GET_ERRORS\";\r\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\r\nexport const GET_CURRENT_USER_POSTS = \"GET_CURRENT_USER_POSTS\";\r\nexport const POSTS_LOADING = \"POSTS_LOADING\";\r\nexport const CLEAR_POSTS = \"CLEAR_POSTS\";\r\nexport const CREATE_POST = \"CREATE_POST\";\r\nexport const DELETE_POST = \"DELETE_POST\";\r\nexport const EDIT_POST = \"EDIT_POST\";\r\nexport const SHOW_MODAL = \"SHOW_MODAL\";\r\n","const isEmpty = (value) =>\r\n    value === undefined ||\r\n    value === null ||\r\n    (typeof value === \"object\" && Object.keys(value).length === 0) ||\r\n    (typeof value === \"string\" && value.trim().length === 0);\r\n\r\nexport default isEmpty;\r\n","import { SET_CURRENT_USER } from \"../actions/types\";\r\nimport isEmpty from \"../validation/is-empty\";\r\n\r\nconst initialState = {\r\n    isAuthenticated: false,\r\n    user: {},\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_CURRENT_USER:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: !isEmpty(action.payload),\r\n                user: action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { GET_ERRORS } from \"../actions/types\";\r\n\r\nconst initialState = {};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_ERRORS:\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {\r\n    GET_CURRENT_USER_POSTS,\r\n    POSTS_LOADING,\r\n    CREATE_POST,\r\n    DELETE_POST,\r\n    EDIT_POST,\r\n    SHOW_MODAL,\r\n} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    showModal: false,\r\n    editPostId: null,\r\n    posts: [],\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case POSTS_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            };\r\n        case GET_CURRENT_USER_POSTS:\r\n            return {\r\n                ...state,\r\n                posts: action.payload,\r\n                loading: false,\r\n            };\r\n        case CREATE_POST:\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, action.payload],\r\n            };\r\n        case DELETE_POST:\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter((el) => el._id !== action.payload),\r\n            };\r\n        case EDIT_POST:\r\n            console.log(action.payload);\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts.filter((el) => el._id !== action.payload._id), action.payload],\r\n            };\r\n        case SHOW_MODAL:\r\n            return {\r\n                ...state,\r\n                showModal: action.payload.shouldShowModal,\r\n                editPostId: action.payload.postId,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport authReducer from \"./authReducer\";\r\nimport errorReducer from \"./errorReducer\";\r\nimport postReducer from \"./postReducer\";\r\n\r\nexport default combineReducers({\r\n    auth: authReducer,\r\n    errors: errorReducer,\r\n    post: postReducer,\r\n});\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(rootReducer, initialState, compose(applyMiddleware(...middleware)));\r\n\r\n// ,\r\n// window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\nexport default store;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { logoutUser } from \"../../actions/authActions\";\r\nclass Navbar extends Component {\r\n    onLogoutClick(e) {\r\n        e.preventDefault();\r\n        this.props.logoutUser();\r\n    }\r\n\r\n    render() {\r\n        const { isAuthenticated, user } = this.props.auth;\r\n\r\n        const authLinks = (\r\n            <ul className=\"navbar-nav ml-auto\">\r\n                {/* <li className=\"nav-item\">\r\n                    <Link className=\"nav-link\" to=\"/home\">\r\n                        Home\r\n                    </Link>\r\n                </li> */}\r\n                <li className=\"nav-item\">\r\n                    <a href=\"\" onClick={this.onLogoutClick.bind(this)} className=\"nav-link\">\r\n                        <img\r\n                            src={user.avatar}\r\n                            alt=\"not found\"\r\n                            className=\"rounded-circle\"\r\n                            style={{ width: \"25px\", marginRight: \"5px\" }}\r\n                            title=\"You must have a gravatar connected to youe email to display image\"\r\n                        />\r\n                        Logout\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n        );\r\n\r\n        const guestLinks = (\r\n            <ul className=\"navbar-nav ml-auto\">\r\n                <li className=\"nav-item\">\r\n                    <Link className=\"nav-link\" to=\"/register\">\r\n                        Sign Up\r\n                    </Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <Link className=\"nav-link\" to=\"/login\">\r\n                        Login\r\n                    </Link>\r\n                </li>\r\n            </ul>\r\n        );\r\n\r\n        return (\r\n            <nav className=\"navbar navbar-expand-sm navbar-cust \">\r\n                <div className=\"container-fluid\">\r\n                    <Link className=\"navbar-brand\" to=\"/\">\r\n                        J O U R N A L\r\n                    </Link>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#mobile-nav\">\r\n                        <svg\r\n                            width=\"1em\"\r\n                            height=\"1em\"\r\n                            viewBox=\"0 0 16 16\"\r\n                            className=\"bi bi-list\"\r\n                            fill=\"currentColor\"\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                        >\r\n                            <path\r\n                                fillRule=\"evenodd\"\r\n                                d=\"M2.5 11.5A.5.5 0 0 1 3 11h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4A.5.5 0 0 1 3 7h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4A.5.5 0 0 1 3 3h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5z\"\r\n                            />\r\n                        </svg>\r\n                    </button>\r\n\r\n                    <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\r\n                        {isAuthenticated ? authLinks : guestLinks}\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nNavbar.propTypes = {\r\n    logoutUser: PropTypes.func.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    auth: state.auth,\r\n});\r\nexport default connect(mapStateToProps, { logoutUser })(Navbar);\r\n","import React from \"react\";\r\n\r\nexport default function Footer() {\r\n    return (\r\n        <div>\r\n            <footer className=\"bg-dark text-white p-2 text-center\">\r\n                Copyright &copy; {new Date().getFullYear()} Journal\r\n            </footer>\r\n        </div>\r\n    );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport Footer from \"./Footer\";\r\n\r\nclass Landing extends Component {\r\n    componentDidMount() {\r\n        if (this.props.auth.isAuthenticated) {\r\n            this.props.history.push(\"/home\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"landing landing-mob\">\r\n                <div className=\"dark-overlay landing-inner text-light\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-12 text-center\">\r\n                                <h1 className={window.screen.width > 641 ? \"display-3 mb-4\" : \"display-4 md-4\"}>\r\n                                    J O U R N A L\r\n                                </h1>\r\n                                <p className=\"lead\">\r\n                                    {\" \"}\r\n                                    This is your life - Lets keep a track of it and lets make it memorable day by day\r\n                                </p>\r\n                                <hr />\r\n                                <Link to=\"/register\" className=\"btn btn-lg btn-info mr-2\">\r\n                                    Sign Up\r\n                                </Link>\r\n                                <Link to=\"/login\" className=\"btn btn-lg btn-light\">\r\n                                    Login\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nLanding.propTypes = {\r\n    auth: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    auth: state.auth,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Landing);\r\n","import React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst TextFieldGroup = ({ name, placeholder, value, label, error, info, type, onChange, disabled }) => {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <input\r\n                type={type}\r\n                className={classnames(\"form-control form-control-lg\", {\r\n                    \"is-invalid\": error,\r\n                })}\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange}\r\n                name={name}\r\n                disabled={disabled}\r\n            />\r\n            {info && <small className=\"form-text text-muted\">{info}</small>}\r\n            {error && <div className=\"invalid-feedback\">{error}</div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nTextFieldGroup.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string,\r\n    value: PropTypes.string.isRequired,\r\n    label: PropTypes.string.isRequired,\r\n    error: PropTypes.string,\r\n    info: PropTypes.string,\r\n    type: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    disabled: PropTypes.string,\r\n};\r\n\r\nTextFieldGroup.defaultProps = {\r\n    type: \"text\",\r\n};\r\n\r\nexport default TextFieldGroup;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { registeruser } from \"../../actions/authActions\";\r\nimport TextFieldGroup from \"../common/TextFieldGroup\";\r\n\r\nclass Register extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            name: \"\",\r\n            email: \"\",\r\n            password: \"\",\r\n            password2: \"\",\r\n            errors: {},\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    onChange(e) {\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.auth.isAuthenticated) {\r\n            this.props.history.push(\"/home\");\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.errors) {\r\n            this.setState({ errors: nextProps.errors });\r\n        }\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        const newUser = {\r\n            name: this.state.name,\r\n            email: this.state.email,\r\n            password: this.state.password,\r\n            password2: this.state.password2,\r\n        };\r\n\r\n        this.props.registeruser(newUser, this.props.history);\r\n    }\r\n\r\n    render() {\r\n        const { errors } = this.state;\r\n\r\n        return (\r\n            <div className=\"register\">\r\n                <div className=\"auth-pages\">\r\n                    <div className=\"row no-gutters align-items-center\">\r\n                        <div className=\"col-sm\">\r\n                            <div className=\"landing\">\r\n                                <div className=\"dark-overlay landing-inner text-light\">\r\n                                    <div className=\"container\">\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-md-12 text-center\">\r\n                                                <h1\r\n                                                    className={\r\n                                                        window.screen.width > 641 ? \"display-3 mb-4\" : \"display-4 md-4\"\r\n                                                    }\r\n                                                >\r\n                                                    J O U R N A L\r\n                                                </h1>\r\n                                                <p className=\"lead\">\r\n                                                    {\" \"}\r\n                                                    This is your life - Lets keep a track of it and lets make it\r\n                                                    memorable day by day\r\n                                                </p>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-sm\">\r\n                            <div className=\"col-md-8 m-auto\">\r\n                                <h1 className=\"display-4 text-center\">Sign Up</h1>\r\n                                <p className=\"lead text-center\">Create your Journal account</p>\r\n                                <form noValidate onSubmit={this.onSubmit}>\r\n                                    <TextFieldGroup\r\n                                        type=\"text\"\r\n                                        error={errors.name}\r\n                                        placeholder=\"Name\"\r\n                                        value={this.state.name}\r\n                                        onChange={this.onChange}\r\n                                        name=\"name\"\r\n                                    />\r\n                                    <small className=\"form-text text-muted\">\r\n                                        This site uses Gravatar so if you want a profile image, use a Gravatar email\r\n                                    </small>\r\n                                    <TextFieldGroup\r\n                                        type=\"email\"\r\n                                        error={errors.email}\r\n                                        placeholder=\"Email Address\"\r\n                                        name=\"email\"\r\n                                        value={this.state.email}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n\r\n                                    <TextFieldGroup\r\n                                        type=\"password\"\r\n                                        error={errors.password}\r\n                                        placeholder=\"Password\"\r\n                                        name=\"password\"\r\n                                        value={this.state.password}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    <TextFieldGroup\r\n                                        type=\"password\"\r\n                                        error={errors.password2}\r\n                                        placeholder=\"Confirm Password\"\r\n                                        name=\"password2\"\r\n                                        value={this.state.password2}\r\n                                        onChange={this.onChange}\r\n                                    />\r\n                                    <input type=\"submit\" className=\"btn btn-info btn-block mt-4\" />\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nRegister.propTypes = {\r\n    registerUser: PropTypes.func.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n    errors: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    auth: state.auth,\r\n    errors: state.errors,\r\n});\r\n\r\nexport default connect(mapStateToProps, { registeruser })(withRouter(Register));\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { loginUser } from \"../../actions/authActions\";\r\nimport TextFieldGroup from \"../common/TextFieldGroup\";\r\n\r\nclass Login extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\",\r\n            errors: {},\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    onChange(e) {\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.auth.isAuthenticated) {\r\n            this.props.history.push(\"/home\");\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (nextProps.auth.isAuthenticated) {\r\n            this.props.history.push(\"/home\");\r\n        }\r\n\r\n        if (nextProps.errors) {\r\n            this.setState({ errors: nextProps.errors });\r\n        }\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        const userData = {\r\n            email: this.state.email,\r\n            password: this.state.password,\r\n        };\r\n\r\n        this.props.loginUser(userData);\r\n    }\r\n\r\n    render() {\r\n        const { errors } = this.state;\r\n        return (\r\n            <div className=\"login\">\r\n                <div className=\"auth-pages\">\r\n                    <div className=\"row no-gutters align-items-center\">\r\n                        <div className=\"col-sm-6\">\r\n                            <div className=\"landing\">\r\n                                <div className=\"dark-overlay landing-inner text-light\">\r\n                                    <div className=\"container\">\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-md-12 text-center\">\r\n                                                <h1\r\n                                                    className={\r\n                                                        window.screen.width > 641 ? \"display-3 mb-4\" : \"display-4 md-4\"\r\n                                                    }\r\n                                                >\r\n                                                    J O U R N A L\r\n                                                </h1>\r\n                                                <p className=\"lead\">\r\n                                                    {\" \"}\r\n                                                    This is your life - Lets keep a track of it and lets make it\r\n                                                    memorable day by day\r\n                                                </p>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-sm-6\">\r\n                            <div className=\"col-md-8 m-auto\">\r\n                                <h1 className=\"display-4 text-center\">Log In</h1>\r\n                                <p className=\"lead text-center\">Sign in to your Journal account</p>\r\n                                <form onSubmit={this.onSubmit}>\r\n                                    <TextFieldGroup\r\n                                        type=\"email\"\r\n                                        error={errors.email}\r\n                                        placeholder=\"Email Address\"\r\n                                        value={this.state.email}\r\n                                        onChange={this.onChange}\r\n                                        name=\"email\"\r\n                                    />\r\n                                    <TextFieldGroup\r\n                                        type=\"password\"\r\n                                        error={errors.password}\r\n                                        placeholder=\"Password\"\r\n                                        value={this.state.password}\r\n                                        onChange={this.onChange}\r\n                                        name=\"password\"\r\n                                    />\r\n                                    <input type=\"submit\" className=\"btn btn-info btn-block mt-4\" />\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nLogin.propTypes = {\r\n    loginUser: PropTypes.func.isRequired,\r\n    auth: PropTypes.object.isRequired,\r\n    errors: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    auth: state.auth,\r\n    errors: state.errors,\r\n});\r\n\r\nexport default connect(mapStateToProps, { loginUser })(Login);\r\n","import axios from \"axios\";\r\nimport { GET_CURRENT_USER_POSTS, POSTS_LOADING, CREATE_POST, DELETE_POST, EDIT_POST, SHOW_MODAL } from \"./types\";\r\n\r\n// Get Current Users POSTS_LOADING\r\nexport const getCurrentUsersPosts = () => (dispatch) => {\r\n    dispatch(setPostsLoading());\r\n    axios\r\n        .get(\"/api/posts\")\r\n        .then((res) => {\r\n            dispatch({\r\n                type: GET_CURRENT_USER_POSTS,\r\n                payload: res.data,\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            dispatch({\r\n                type: GET_CURRENT_USER_POSTS,\r\n                payload: {},\r\n            });\r\n        });\r\n};\r\n\r\n// Create a new Post\r\nexport const createPost = (postData) => (dispatch) => {\r\n    axios\r\n        .post(\"/api/posts\", postData)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: CREATE_POST,\r\n                payload: res.data,\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n            dispatch({\r\n                type: CREATE_POST,\r\n                payload: {},\r\n            });\r\n        });\r\n};\r\n\r\n// edit a post\r\nexport const editPost = (id, updatedData) => (dispatch) => {\r\n    axios\r\n        .put(`/api/posts/${id}`, updatedData)\r\n        .then((res) => {\r\n            dispatch({\r\n                type: EDIT_POST,\r\n                payload: res.data,\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n            dispatch({\r\n                type: EDIT_POST,\r\n                payload: {},\r\n            });\r\n        });\r\n};\r\n\r\n// delete a post\r\nexport const deletePost = (id) => (dispatch) => {\r\n    axios\r\n        .delete(`/api/posts/${id}`)\r\n        .then((res) => {\r\n            console.log(res);\r\n            dispatch({\r\n                type: DELETE_POST,\r\n                payload: id,\r\n            });\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n            dispatch({\r\n                type: DELETE_POST,\r\n                payload: {},\r\n            });\r\n        });\r\n};\r\n\r\nexport const shouldShowModal = (shouldShowModal, postId) => (dispatch) => {\r\n    return dispatch({\r\n        type: SHOW_MODAL,\r\n        payload: { shouldShowModal, postId },\r\n    });\r\n};\r\n\r\n// posts Loading\r\nexport const setPostsLoading = () => {\r\n    return {\r\n        type: POSTS_LOADING,\r\n    };\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getCurrentUsersPosts, editPost } from \"../../actions/postActions\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport CKEditor from \"@ckeditor/ckeditor5-react\";\r\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\r\nimport TagsInput from \"react-tagsinput\";\r\nimport \"react-tagsinput/react-tagsinput.css\"; // If using WebPack and style-loader.\r\n\r\nclass PostCards extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const editedPost =\r\n            (props.posts &&\r\n                props.editPostId &&\r\n                props.posts.filter((elem) => {\r\n                    return elem._id === props.editPostId;\r\n                })[0]) ||\r\n            \"\";\r\n\r\n        this.state = {\r\n            posts: [],\r\n            postId: editedPost._id || \"\",\r\n            postContent: editedPost.postContent || \"\",\r\n            postHeader: editedPost.postHeader || \"\",\r\n            postMood: editedPost.postMood || {\r\n                happy: false,\r\n                sad: false,\r\n                funny: false,\r\n                tired: false,\r\n                bored: false,\r\n                love: false,\r\n                blessed: false,\r\n                crying: false,\r\n                angry: false,\r\n                calm: false,\r\n            },\r\n            postHashtags: editedPost.postHashtags || [],\r\n            memorablePost: editedPost.memorablePost || false,\r\n            postDate: editedPost.postDate,\r\n            // modalShow: false,\r\n        };\r\n\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.onChange = this.onChange.bind(this);\r\n        this.memorablePostChange = this.memorablePostChange.bind(this);\r\n        this.handleHashtagsChange = this.handleHashtagsChange.bind(this);\r\n        this.postMoodChange = this.postMoodChange.bind(this);\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.stopPropagation();\r\n        this.props.editPost(this.state.postId, {\r\n            postHeader: this.state.postHeader,\r\n            postContent: this.state.postContent,\r\n            postMood: this.state.postMood,\r\n            postHashtags: this.state.postHashtags,\r\n            memorablePost: this.state.memorablePost,\r\n            postDate: new Date(this.state.postDate),\r\n        });\r\n        this.props.onHide();\r\n        console.log(this.state.postContent, \"form submitted\");\r\n    }\r\n\r\n    onChange(e) {\r\n        console.log(e.target.value);\r\n        this.setState({\r\n            postHeader: e.target.value,\r\n        });\r\n    }\r\n\r\n    memorablePostChange(e) {\r\n        console.log(\"$$$$$$$$\", e.target.checked);\r\n        this.setState({\r\n            memorablePost: e.target.checked,\r\n        });\r\n    }\r\n\r\n    postMoodChange(e) {\r\n        let name = e.target.name.split(\"-\")[1];\r\n        let isChecked = e.target.checked;\r\n        this.setState((prevState) => {\r\n            let postMood = Object.assign({}, prevState.postMood); // creating copy of state variable jasper\r\n            postMood[name] = isChecked; // update the name property, assign a new value\r\n            return { postMood }; // return new object jasper object\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(nextProps, nextState) {\r\n        // console.log(\"compnentDidUpdate : \", nextProps, nextState);\r\n        console.log(nextProps.editPostId, this.state.postId);\r\n\r\n        const editedPost =\r\n            (nextProps.posts &&\r\n                nextProps.editPostId &&\r\n                nextProps.posts.filter((elem) => {\r\n                    return elem._id === nextProps.editPostId;\r\n                })[0]) ||\r\n            \"\";\r\n\r\n        if (editedPost) {\r\n            console.log(nextProps.editPostId, this.state.postId);\r\n            if (nextProps.editPostId !== this.state.postId)\r\n                return this.setState({\r\n                    postId: editedPost._id,\r\n                    postHeader: editedPost.postHeader,\r\n                    postContent: editedPost.postContent,\r\n                    postMood: editedPost.postMood,\r\n                    postHashtags: editedPost.postHashtags,\r\n                    memorablePost: editedPost.memorablePost,\r\n                    postDate: editedPost.postDate,\r\n                });\r\n        }\r\n    }\r\n\r\n    handleHashtagsChange(postHashtags) {\r\n        this.setState({ postHashtags });\r\n    }\r\n\r\n    inputProps() {\r\n        return {\r\n            placeholder: \"Hashtags\",\r\n        };\r\n    }\r\n\r\n    // static getDerivedStateFromProps(props, state) {\r\n    //     console.log(\"--------------\");\r\n    //     const editedPost =\r\n    //         (props.posts &&\r\n    //             props.editPostId &&\r\n    //             props.posts.filter((elem) => {\r\n    //                 return elem._id === props.editPostId;\r\n    //             })[0]) ||\r\n    //         \"\";\r\n\r\n    //     if (state.postHeader) {\r\n    //         return;\r\n    //     }\r\n\r\n    //     if (editedPost) {\r\n    //         return {\r\n    //             postId: editedPost._id,\r\n    //             postHeader: editedPost.postHeader,\r\n    //             postContent: editedPost.postContent,\r\n    //             postMood: editedPost.postMood,\r\n    //             postHashtags: editedPost.postHashtags,\r\n    //             memorablePost: editedPost.memorablePost,\r\n    //         };\r\n    //     }\r\n    //     console.log(props, state);\r\n    // }\r\n\r\n    render() {\r\n        const editedPost =\r\n            (this.props.posts &&\r\n                this.props.editPostId &&\r\n                this.props.posts.filter((elem) => {\r\n                    return elem._id === this.props.editPostId;\r\n                })[0]) ||\r\n            \"\";\r\n\r\n        // if (editedPost) {\r\n        //     this.setState({\r\n        //         postHeader: editedPost.postHeader,\r\n        //     });\r\n        // }\r\n\r\n        return (\r\n            <Modal {...this.props} aria-labelledby=\"contained-modal-title-vcenter\">\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        <h5 className=\"alert alert-danger\">Past is Past!! Try not to change it</h5>\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body className=\"show-grid\">\r\n                    {editedPost && (\r\n                        <form onSubmit={this.onSubmit}>\r\n                            <input\r\n                                type=\"text\"\r\n                                value={this.state.postHeader}\r\n                                className=\"form-control form-control-lg\"\r\n                                onChange={this.onChange}\r\n                                name=\"postHeader\"\r\n                            />\r\n                            <CKEditor\r\n                                editor={ClassicEditor}\r\n                                data={editedPost.postContent}\r\n                                onChange={(event, editor) => {\r\n                                    const data = editor.getData();\r\n                                    this.setState({\r\n                                        postContent: data,\r\n                                    });\r\n                                }}\r\n                            />\r\n                            <div className=\"row\" style={{ padding: \"15px 0\" }}>\r\n                                <div className=\"col-sm-12\" style={{ paddingTop: \"6px\", marginBottom: \"15px\" }}>\r\n                                    <TagsInput\r\n                                        value={this.state.postHashtags}\r\n                                        onChange={this.handleHashtagsChange}\r\n                                        inputProps={this.inputProps()}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"col-sm-2\">\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        className=\"form-control form-control-lg\"\r\n                                        checked={this.state.memorablePost}\r\n                                        onChange={this.memorablePostChange}\r\n                                        name=\"memorablePost\"\r\n                                    />\r\n                                </div>\r\n                                <div className=\"col-sm-10\" style={{ paddingTop: \"6px\" }}>\r\n                                    <h4>Was today a memorable Day ?</h4>\r\n                                </div>\r\n                                <div className=\"row mood-section\">\r\n                                    <span>\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            className=\"form-control form-control-lg\"\r\n                                            checked={this.state.postMood.angry}\r\n                                            onChange={this.postMoodChange}\r\n                                            name=\"mood-angry\"\r\n                                            id=\"edited-angry\"\r\n                                        />\r\n                                        <label htmlFor=\"aedited-angry\" className=\"emoji\">\r\n                                            <span role=\"img\" aria-label=\"angry\">\r\n                                                😠😡\r\n                                            </span>\r\n                                        </label>\r\n                                    </span>\r\n                                    <span>\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            className=\"form-control form-control-lg\"\r\n                                            checked={this.state.postMood.blessed}\r\n                                            onChange={this.postMoodChange}\r\n                                            name=\"mood-blessed\"\r\n                                            id=\"edited-blessed\"\r\n                                        />\r\n                                        <label htmlFor=\"edited-blessed\" className=\"emoji\">\r\n                                            <span role=\"img\" aria-label=\"blessed\">\r\n                                                😇🛕\r\n                                            </span>\r\n                                        </label>\r\n                                    </span>\r\n                                    <span>\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            className=\"form-control form-control-lg\"\r\n                                            checked={this.state.postMood.bored}\r\n                                            onChange={this.postMoodChange}\r\n                                            name=\"mood-bored\"\r\n                                            id=\"edited-bored\"\r\n                                        />\r\n                                        <label htmlFor=\"edited-bored\" className=\"emoji\">\r\n                                            <span role=\"img\" aria-label=\"bored\">\r\n                                                🥱💤\r\n                                            </span>\r\n                                        </label>\r\n                                    </span>\r\n                                    <span>\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            className=\"form-control form-control-lg\"\r\n                                            checked={this.state.postMood.calm}\r\n                                            onChange={this.postMoodChange}\r\n                                            name=\"mood-calm\"\r\n                                            id=\"edited-calm\"\r\n                                        />\r\n                                        <label htmlFor=\"edited-calm\" className=\"emoji\">\r\n                                            <span role=\"img\" aria-label=\"calm\">\r\n                                                😌🧘🏼‍♂️\r\n                                            </span>\r\n                                        </label>\r\n                                    </span>\r\n                                    <span>\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            className=\"form-control form-control-lg\"\r\n                                            checked={this.state.postMood.crying}\r\n                                            onChange={this.postMoodChange}\r\n                                            name=\"mood-crying\"\r\n                                            id=\"edited-crying\"\r\n                                        />\r\n                                        <label htmlFor=\"edited-crying\" className=\"emoji\">\r\n                                            <span role=\"img\" aria-label=\"crying\">\r\n                                                😢😭\r\n                                            </span>\r\n                                        </label>\r\n                                    </span>\r\n                                    <span>\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            className=\"form-control form-control-lg\"\r\n                                            checked={this.state.postMood.funny}\r\n                                            onChange={this.postMoodChange}\r\n                                            name=\"mood-funny\"\r\n                                            id=\"edited-funny\"\r\n                                        />\r\n                                        <label htmlFor=\"edited-funny\" className=\"emoji\">\r\n                                            <span role=\"img\" aria-label=\"funny\">\r\n                                                🥳🤩\r\n                                            </span>\r\n                                        </label>\r\n                                    </span>\r\n                                    <span>\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            className=\"form-control form-control-lg\"\r\n                                            checked={this.state.postMood.happy}\r\n                                            onChange={this.postMoodChange}\r\n                                            name=\"mood-happy\"\r\n                                            id=\"edited-happy\"\r\n                                        />\r\n                                        <label htmlFor=\"edited-happy\" className=\"emoji\">\r\n                                            <span role=\"img\" aria-label=\"happy\">\r\n                                                😀🙂\r\n                                            </span>\r\n                                        </label>\r\n                                    </span>\r\n                                    <span>\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            className=\"form-control form-control-lg\"\r\n                                            checked={this.state.postMood.love}\r\n                                            onChange={this.postMoodChange}\r\n                                            name=\"mood-love\"\r\n                                            id=\"edited-love\"\r\n                                        />\r\n                                        <label htmlFor=\"edited-love\" className=\"emoji\">\r\n                                            <span role=\"img\" aria-label=\"love\">\r\n                                                😍❤️\r\n                                            </span>\r\n                                        </label>\r\n                                    </span>\r\n                                    <span>\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            className=\"form-control form-control-lg\"\r\n                                            checked={this.state.postMood.sad}\r\n                                            onChange={this.postMoodChange}\r\n                                            name=\"mood-sad\"\r\n                                            id=\"edited-sad\"\r\n                                        />\r\n                                        <label htmlFor=\"edited-sad\" className=\"emoji\">\r\n                                            <span role=\"img\" aria-label=\"sad\">\r\n                                                😞😟\r\n                                            </span>\r\n                                        </label>\r\n                                    </span>\r\n                                    <span>\r\n                                        <input\r\n                                            type=\"checkbox\"\r\n                                            className=\"form-control form-control-lg\"\r\n                                            checked={this.state.postMood.tired}\r\n                                            onChange={this.postMoodChange}\r\n                                            name=\"mood-tired\"\r\n                                            id=\"edited-tired\"\r\n                                        />\r\n                                        <label htmlFor=\"edited-tired\" className=\"emoji\">\r\n                                            <span role=\"img\" aria-label=\"tired\">\r\n                                                🤒🩺\r\n                                            </span>\r\n                                        </label>\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                    )}\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    {this.state.postHeader && this.state.postContent && (\r\n                        <button type=\"submit\" className=\"btn save-btn\" onClick={this.onSubmit}>\r\n                            Save\r\n                        </button>\r\n                    )}\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    auth: state.auth,\r\n    errors: state.errors,\r\n    posts: state.post.posts,\r\n    editPostId: state.post.editPostId,\r\n});\r\n\r\nexport default connect(mapStateToProps, { getCurrentUsersPosts, editPost })(PostCards);\r\n","import React from \"react\";\r\n\r\nconst MemorablePost = (props) => {\r\n    if (props.memorablePost) {\r\n        return (\r\n            <span className=\"badge badge-pill badge-success\" style={{ margin: \"7px\" }}>\r\n                Memorable Day\r\n            </span>\r\n        );\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\nexport default MemorablePost;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getCurrentUsersPosts, shouldShowModal } from \"../../actions/postActions\";\r\nimport { deletePost } from \"../../actions/postActions\";\r\nimport CKEditor from \"@ckeditor/ckeditor5-react\";\r\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\r\nimport EditPostModalPopup from \"./EditPostModalPopup\";\r\nimport MemorablePost from \"./MemorablePost\";\r\n// import ModalDialog from \"react-bootstrap/ModalDialog\";\r\n// import Modal from \"react-bootstrap/Modal\";\r\n// import ModalHeader from \"react-bootstrap/ModalHeader\";\r\n// import ModalBody from \"react-bootstrap/ModalBody\";\r\n\r\nclass PostCards extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            posts: [],\r\n            showModal: false,\r\n        };\r\n\r\n        this.deletePost = this.deletePost.bind(this);\r\n        this.editPost = this.editPost.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getCurrentUsersPosts();\r\n    }\r\n\r\n    deletePost(postId) {\r\n        this.props.deletePost(postId);\r\n    }\r\n\r\n    editPost(postId) {\r\n        this.props.shouldShowModal(true, postId);\r\n        this.props.getCurrentUsersPosts();\r\n        console.log(this.props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <EditPostModalPopup\r\n                    show={this.props.showModal}\r\n                    size=\"lg\"\r\n                    onHide={() => this.props.shouldShowModal(false)}\r\n                />\r\n                {this.props.posts &&\r\n                    this.props.posts.length &&\r\n                    this.props.posts.map((post) => {\r\n                        const date = new Date(post.postDate);\r\n                        const dateTimeFormat = new Intl.DateTimeFormat(\"en\", {\r\n                            year: \"numeric\",\r\n                            month: \"short\",\r\n                            day: \"2-digit\",\r\n                        });\r\n                        const [{ value: month }, , { value: day }, , { value: year }] = dateTimeFormat.formatToParts(\r\n                            date\r\n                        );\r\n                        const postMoods = {\r\n                            angry: \"😠😡\",\r\n                            blessed: \"😇🛕\",\r\n                            bored: \"🥱💤\",\r\n                            calm: \"😌🧘🏼‍♂️\",\r\n                            crying: \"😢😭\",\r\n                            funny: \"🥳🤩\",\r\n                            happy: \"😀🙂\",\r\n                            love: \"😍❤️\",\r\n                            sad: \"😞😟\",\r\n                            tired: \"🤒🩺\",\r\n                        };\r\n                        const postMoodObj = post.postMood;\r\n\r\n                        return (\r\n                            <div className=\"card bg-light\" key={post._id} style={{ minWidth: \"15rem\" }}>\r\n                                <div className=\"card-body custom-card\">\r\n                                    <h4 className=\"custom-card-date\">\r\n                                        {`${day} ${month} ${year}`}\r\n\r\n                                        <span\r\n                                            onClick={() => this.deletePost(post._id)}\r\n                                            style={{ float: \"right\", cursor: \"pointer\", paddingLeft: \"10px\" }}\r\n                                            title=\"Delete\"\r\n                                        >\r\n                                            <svg\r\n                                                className=\"bi bi-trash-fill\"\r\n                                                width=\"1em\"\r\n                                                height=\"1em\"\r\n                                                viewBox=\"0 0 16 16\"\r\n                                                fill=\"currentColor\"\r\n                                                xmlns=\"http://www.w3.org/2000/svg\"\r\n                                            >\r\n                                                <path\r\n                                                    fillRule=\"evenodd\"\r\n                                                    d=\"M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5a.5.5 0 0 0-1 0v7a.5.5 0 0 0 1 0v-7z\"\r\n                                                />\r\n                                            </svg>\r\n                                        </span>\r\n                                        <span\r\n                                            onClick={() => this.editPost(post._id)}\r\n                                            style={{ float: \"right\", cursor: \"pointer\" }}\r\n                                            title=\"Edit\"\r\n                                        >\r\n                                            <svg\r\n                                                className=\"bi bi-pencil\"\r\n                                                width=\"1em\"\r\n                                                height=\"1em\"\r\n                                                viewBox=\"0 0 16 16\"\r\n                                                fill=\"currentColor\"\r\n                                                xmlns=\"http://www.w3.org/2000/svg\"\r\n                                            >\r\n                                                <path\r\n                                                    fillRule=\"evenodd\"\r\n                                                    d=\"M11.293 1.293a1 1 0 0 1 1.414 0l2 2a1 1 0 0 1 0 1.414l-9 9a1 1 0 0 1-.39.242l-3 1a1 1 0 0 1-1.266-1.265l1-3a1 1 0 0 1 .242-.391l9-9zM12 2l2 2-9 9-3 1 1-3 9-9z\"\r\n                                                />\r\n                                                <path\r\n                                                    fillRule=\"evenodd\"\r\n                                                    d=\"M12.146 6.354l-2.5-2.5.708-.708 2.5 2.5-.707.708zM3 10v.5a.5.5 0 0 0 .5.5H4v.5a.5.5 0 0 0 .5.5H5v.5a.5.5 0 0 0 .5.5H6v-1.5a.5.5 0 0 0-.5-.5H5v-.5a.5.5 0 0 0-.5-.5H3z\"\r\n                                                />\r\n                                            </svg>\r\n                                        </span>\r\n                                    </h4>\r\n                                    <h5 className=\"card-title custom-card-header\">{post.postHeader}</h5>\r\n                                    <div className=\"card-text custom-card-content\">\r\n                                        <CKEditor\r\n                                            editor={ClassicEditor}\r\n                                            data={post.postContent}\r\n                                            disabled={true}\r\n                                            config={{\r\n                                                toolbar: [],\r\n                                            }}\r\n                                            onChange={(event, editor) => {\r\n                                                const data = editor.getData();\r\n                                                //console.log({ event, editor, data });\r\n                                                this.setState({\r\n                                                    postContent: data,\r\n                                                });\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                    <MemorablePost memorablePost={post.memorablePost} />\r\n                                    <div className=\"moodSection\">\r\n                                        {Object.keys(postMoodObj).map(function (key) {\r\n                                            return postMoodObj[key] ? (\r\n                                                <span\r\n                                                    value={key}\r\n                                                    className=\"emoji postEmoji postEmojiActive\"\r\n                                                    style={{ margin: \"5px\" }}\r\n                                                >\r\n                                                    {postMoods[key]}\r\n                                                </span>\r\n                                            ) : null;\r\n                                        })}\r\n                                    </div>\r\n                                    <div className=\"custom-card-tags\">\r\n                                        {post.postHashtags.map((elem, i) => {\r\n                                            return (\r\n                                                <span\r\n                                                    className=\"badge badge-pill badge-info\"\r\n                                                    style={{ margin: \"2px 4px\", padding: \"5px\", borderRadius: \"5px\" }}\r\n                                                    key={i}\r\n                                                >\r\n                                                    #{elem}\r\n                                                </span>\r\n                                            );\r\n                                        })}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    auth: state.auth,\r\n    errors: state.errors,\r\n    posts: state.post.posts,\r\n    showModal: state.post.showModal,\r\n});\r\n\r\nexport default connect(mapStateToProps, { getCurrentUsersPosts, deletePost, shouldShowModal })(PostCards);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createPost } from \"../../actions/postActions\";\r\nimport CKEditor from \"@ckeditor/ckeditor5-react\";\r\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\r\nimport TagsInput from \"react-tagsinput\";\r\nimport \"react-tagsinput/react-tagsinput.css\"; // If using WebPack and style-loader.\r\n\r\nclass CreatePost extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            postHeader: \"\",\r\n            postContent: \"\",\r\n            postMood: {\r\n                happy: false,\r\n                sad: false,\r\n                funny: false,\r\n                tired: false,\r\n                bored: false,\r\n                love: false,\r\n                blessed: false,\r\n                crying: false,\r\n                angry: false,\r\n                calm: false,\r\n            },\r\n            postHashtags: [],\r\n            memorablePost: false,\r\n        };\r\n\r\n        this.postHeaderChange = this.postHeaderChange.bind(this);\r\n        this.postContentChange = this.postContentChange.bind(this);\r\n        this.memorablePostChange = this.memorablePostChange.bind(this);\r\n        this.handleHashtagsChange = this.handleHashtagsChange.bind(this);\r\n        this.postMoodChange = this.postMoodChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    postHeaderChange(e) {\r\n        this.setState({\r\n            postHeader: e.target.value,\r\n        });\r\n    }\r\n\r\n    handleHashtagsChange(postHashtags) {\r\n        this.setState({ postHashtags });\r\n    }\r\n\r\n    postContentChange(e) {\r\n        this.setState({\r\n            postContent: e.target.value,\r\n        });\r\n\r\n        //console.log(this.state);\r\n    }\r\n\r\n    memorablePostChange(e) {\r\n        console.log(e.target);\r\n        this.setState({\r\n            memorablePost: e.target.checked,\r\n        });\r\n        //console.log(this.state.memorablePost);\r\n    }\r\n\r\n    postMoodChange(e) {\r\n        let name = e.target.name.split(\"-\")[1];\r\n        let isChecked = e.target.checked;\r\n        this.setState((prevState) => {\r\n            let postMood = Object.assign({}, prevState.postMood); // creating copy of state variable jasper\r\n            postMood[name] = isChecked; // update the name property, assign a new value\r\n            return { postMood }; // return new object jasper object\r\n        });\r\n    }\r\n\r\n    onSubmit() {\r\n        this.props.createPost(this.state);\r\n        this.setState({\r\n            postHeader: \"\",\r\n            postContent: \"\",\r\n            postMood: {\r\n                happy: false,\r\n                sad: false,\r\n                funny: false,\r\n                tired: false,\r\n                bored: false,\r\n                love: false,\r\n                blessed: false,\r\n                crying: false,\r\n                angry: false,\r\n                calm: false,\r\n            },\r\n            postHashtags: [],\r\n            memorablePost: false,\r\n        });\r\n    }\r\n\r\n    inputProps() {\r\n        return {\r\n            placeholder: \"Hashtags\",\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container-fluid create-post-section\">\r\n                <div className=\"row no-gutters\">\r\n                    <div className=\"col-sm-4 create-post-left-section pad15\">\r\n                        <h3 style={{ display: \"inline-block\" }}> Hello {this.props.auth.user.name}, &nbsp; </h3>\r\n                        <h5 style={{ display: \"inline-block\" }}> Hope it was a good day </h5>\r\n                        <hr />\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control form-control-md\"\r\n                            placeholder=\"Brief description of your day... !!\"\r\n                            value={this.state.postHeader}\r\n                            onChange={this.postHeaderChange}\r\n                            name=\"postHeader\"\r\n                        />\r\n\r\n                        <div className=\"row\" style={{ padding: \"15px 0\" }}>\r\n                            <div className=\"col-sm-12\" style={{ paddingTop: \"6px\", marginBottom: \"15px\" }}>\r\n                                <TagsInput\r\n                                    value={this.state.postHashtags}\r\n                                    onChange={this.handleHashtagsChange}\r\n                                    inputProps={this.inputProps()}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-sm-12\">\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-control form-control-lg\"\r\n                                    checked={this.state.memorablePost}\r\n                                    onChange={this.memorablePostChange}\r\n                                    name=\"memorablePost\"\r\n                                    style={{ display: \"inline\", width: \"45px\" }}\r\n                                />\r\n                                <h4 className=\"memorablePostLabel\">Was today a memorable Day ?</h4>\r\n                            </div>\r\n                            {/* <div className=\"col-sm-10\" style={{ paddingTop: \"6px\" }}>\r\n                                \r\n                            </div> */}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-sm-8 create-post-right-section\">\r\n                        <CKEditor\r\n                            editor={ClassicEditor}\r\n                            data={this.state.postContent}\r\n                            config={{\r\n                                placeholder: \"Okay how good was your day !!\",\r\n                            }}\r\n                            onChange={(event, editor) => {\r\n                                const data = editor.getData();\r\n                                //console.log({ event, editor, data });\r\n                                this.setState({\r\n                                    postContent: data,\r\n                                });\r\n                            }}\r\n                        />\r\n                        <div className=\"row mood-section\">\r\n                            <span>\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-control form-control-lg\"\r\n                                    checked={this.state.postMood.angry}\r\n                                    onChange={this.postMoodChange}\r\n                                    name=\"mood-angry\"\r\n                                    id=\"angry\"\r\n                                />\r\n                                <label htmlFor=\"angry\" className=\"emoji\">\r\n                                    <span role=\"img\" aria-label=\"angry\">\r\n                                        😠😡\r\n                                    </span>\r\n                                </label>\r\n                            </span>\r\n                            <span>\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-control form-control-lg\"\r\n                                    checked={this.state.postMood.blessed}\r\n                                    onChange={this.postMoodChange}\r\n                                    name=\"mood-blessed\"\r\n                                    id=\"blessed\"\r\n                                />\r\n                                <label htmlFor=\"blessed\" className=\"emoji\">\r\n                                    <span role=\"img\" aria-label=\"blessed\">\r\n                                        😇🛕\r\n                                    </span>\r\n                                </label>\r\n                            </span>\r\n                            <span>\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-control form-control-lg\"\r\n                                    checked={this.state.postMood.bored}\r\n                                    onChange={this.postMoodChange}\r\n                                    name=\"mood-bored\"\r\n                                    id=\"bored\"\r\n                                />\r\n                                <label htmlFor=\"bored\" className=\"emoji\">\r\n                                    <span role=\"img\" aria-label=\"bored\">\r\n                                        🥱💤\r\n                                    </span>\r\n                                </label>\r\n                            </span>\r\n                            <span>\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-control form-control-lg\"\r\n                                    checked={this.state.postMood.calm}\r\n                                    onChange={this.postMoodChange}\r\n                                    name=\"mood-calm\"\r\n                                    id=\"calm\"\r\n                                />\r\n                                <label htmlFor=\"calm\" className=\"emoji\">\r\n                                    <span role=\"img\" aria-label=\"calm\">\r\n                                        😌🧘🏼‍♂️\r\n                                    </span>\r\n                                </label>\r\n                            </span>\r\n                            <span>\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-control form-control-lg\"\r\n                                    checked={this.state.postMood.crying}\r\n                                    onChange={this.postMoodChange}\r\n                                    name=\"mood-crying\"\r\n                                    id=\"crying\"\r\n                                />\r\n                                <label htmlFor=\"crying\" className=\"emoji\">\r\n                                    <span role=\"img\" aria-label=\"crying\">\r\n                                        😢😭\r\n                                    </span>\r\n                                </label>\r\n                            </span>\r\n                            <span>\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-control form-control-lg\"\r\n                                    checked={this.state.postMood.funny}\r\n                                    onChange={this.postMoodChange}\r\n                                    name=\"mood-funny\"\r\n                                    id=\"funny\"\r\n                                />\r\n                                <label htmlFor=\"funny\" className=\"emoji\">\r\n                                    <span role=\"img\" aria-label=\"funny\">\r\n                                        🥳🤩\r\n                                    </span>\r\n                                </label>\r\n                            </span>\r\n                            <span>\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-control form-control-lg\"\r\n                                    checked={this.state.postMood.happy}\r\n                                    onChange={this.postMoodChange}\r\n                                    name=\"mood-happy\"\r\n                                    id=\"happy\"\r\n                                />\r\n                                <label htmlFor=\"happy\" className=\"emoji\">\r\n                                    <span role=\"img\" aria-label=\"happy\">\r\n                                        😀🙂\r\n                                    </span>\r\n                                </label>\r\n                            </span>\r\n                            <span>\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-control form-control-lg\"\r\n                                    checked={this.state.postMood.love}\r\n                                    onChange={this.postMoodChange}\r\n                                    name=\"mood-love\"\r\n                                    id=\"love\"\r\n                                />\r\n                                <label htmlFor=\"love\" className=\"emoji\">\r\n                                    <span role=\"img\" aria-label=\"love\">\r\n                                        😍❤️\r\n                                    </span>\r\n                                </label>\r\n                            </span>\r\n                            <span>\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-control form-control-lg\"\r\n                                    checked={this.state.postMood.sad}\r\n                                    onChange={this.postMoodChange}\r\n                                    name=\"mood-sad\"\r\n                                    id=\"sad\"\r\n                                />\r\n                                <label htmlFor=\"sad\" className=\"emoji\">\r\n                                    <span role=\"img\" aria-label=\"sad\">\r\n                                        😞😟\r\n                                    </span>\r\n                                </label>\r\n                            </span>\r\n                            <span>\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    className=\"form-control form-control-lg\"\r\n                                    checked={this.state.postMood.tired}\r\n                                    onChange={this.postMoodChange}\r\n                                    name=\"mood-tired\"\r\n                                    id=\"tired\"\r\n                                />\r\n                                <label htmlFor=\"tired\" className=\"emoji\">\r\n                                    <span role=\"img\" aria-label=\"tired\">\r\n                                        🤒🩺\r\n                                    </span>\r\n                                </label>\r\n                            </span>\r\n                        </div>\r\n\r\n                        {this.state.postHeader && this.state.postContent && (\r\n                            <button value=\"submit\" className=\"btn save-btn\" onClick={this.onSubmit}>\r\n                                Save\r\n                            </button>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    auth: state.auth,\r\n    errors: state.errors,\r\n    posts: state.post.posts,\r\n});\r\n\r\nexport default connect(mapStateToProps, { createPost })(CreatePost);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getCurrentUsersPosts } from \"../../actions/postActions\";\r\nimport PostCards from \"./PostCards\";\r\nimport CreatePost from \"./CreatePost\";\r\n\r\nclass Home extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            posts: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getCurrentUsersPosts();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container-fluid action-pages\">\r\n                <CreatePost user={this.props.user} />\r\n                <div className=\"card-deck\">\r\n                    <PostCards />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    auth: state.auth,\r\n    errors: state.errors,\r\n    posts: state.post.posts,\r\n});\r\n\r\nexport default connect(mapStateToProps, { getCurrentUsersPosts })(Home);\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport setAuthToken from \"./utils/setAuthToken\";\r\nimport { setCurrentUser, logoutUser } from \"./actions/authActions\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\n\r\nimport Navbar from \"./components/layout/Navbar\";\r\nimport Footer from \"./components/layout/Footer\";\r\nimport Landing from \"./components/layout/Landing\";\r\nimport Register from \"./components/auth/Register\";\r\nimport Login from \"./components/auth/Login\";\r\nimport Home from \"./components/home/Home\";\r\n\r\nimport \"./App.css\";\r\n\r\nif (localStorage.jwtToken) {\r\n    // set the auth token header auth\r\n    setAuthToken(localStorage.jwtToken);\r\n    // decode token and get user info and export default\r\n    const decoded = jwt_decode(localStorage.jwtToken);\r\n    // set user and isAuthenticated\r\n    store.dispatch(setCurrentUser(decoded));\r\n    // check for expired token\r\n    const currentTime = Date.now() / 1000;\r\n    if (decoded.exp < currentTime) {\r\n        store.dispatch(logoutUser());\r\n        window.location.href = \"/login\";\r\n    }\r\n}\r\n\r\nfunction App() {\r\n    return (\r\n        <Provider store={store}>\r\n            <Router>\r\n                <div className=\"App\">\r\n                    <Navbar />\r\n                    <Route exact path=\"/\" component={Landing} />\r\n                    <div className=\"container-fluid\" style={{ padding: 0 }}>\r\n                        <Route exact path=\"/register\" component={Register} />\r\n                        <Route exact path=\"/login\" component={Login} />\r\n                        <Route exact path=\"/home\" component={Home} />\r\n                    </div>\r\n                    <Footer />\r\n                </div>\r\n            </Router>\r\n        </Provider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}